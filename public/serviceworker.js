const CORE_CACHE_NAME="cache-v1",RUNTIME_CACHE_NAME="runtime-cache",CORE_ASSETS=["/offline","css/style.css"];function fetchAndCache(n){return fetch(n).then(e=>{const t=e.clone();return caches.open(RUNTIME_CACHE_NAME).then(e=>e.put(n,t)),e})}self.addEventListener("install",e=>{e.waitUntil(caches.open(CORE_CACHE_NAME).then(e=>e.addAll(CORE_ASSETS)).then(()=>self.skipWaiting()))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(e=>Promise.all(e.map(e=>{if(e!==CORE_CACHE_NAME&&e!==RUNTIME_CACHE_NAME)return caches.delete(e)}))))}),self.addEventListener("fetch",t=>{const n=new URL(t.request.url).pathname;t.request.headers.get("accept").includes("text/html")?t.respondWith(caches.open(RUNTIME_CACHE_NAME).then(e=>e.match(t.request)).then(e=>e||fetchAndCache(t.request)).catch(()=>caches.open(CORE_CACHE_NAME).then(e=>e.match("/offline")))):CORE_ASSETS.includes(n)&&t.respondWith(caches.open(CORE_CACHE_NAME).then(e=>e.match(n)))});